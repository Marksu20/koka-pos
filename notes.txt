authentication 
email verification
reset password(email)
display success/error

mongodb_pass: YA5nYDjOA1Y6Naau

display success/error:
https://raddy.dev/blog/display-node-js-flash-messages-using-ejs/

user authentication:
https://dev.to/fredabod/authentication-signup-and-login-with-expressmongodb-and-jwt-2n64

//controller
signup
// const { username, email, password } = req.body;
    // check if the input fields are valid
    // if(!username || !password) {
    //   return res
    //     .status(400)
    //     .json({ message: "Please Input Username and Password"});
    // }
    // if(!email) {
    //   return res
    //     .status(400)
    //     .json({ message: "Please provide an email"});
    // }
    // // check if user exists in the database
    // const existingUser = await User.findOne({ email });
    // if(existingUser) {
    //   return res.status(400).json({ message: "This account already exist" });
    // }
    // hash the user's password
    // const saltRounds = 10;
    // const hashedPassword = await bcrypt.hash(password, saltRounds);

    // // save the user to the database
    // const newUser = new User({
    //   username: username,
    //   email: email,
    //   password: hashedPassword,
    // });
    // await newUser.save();
    // return res
    //   .status(201)
    //   .json({ message: "Account Created Succesfully", newUser });

  signin
    // const { username, password } = req.body;
    // // check if the input fields are valid
    // if(!username || !password) {
    //   return res
    //     .status(400)
    //     .json({ message: "please input username and password"});
    // }
    // // check if user exists in the database
    // const user = await User.findOne({ username });
    // if(!user) {
    //   return res.status(401).json({ message: 'invalid username or password'})
    // }
    // // compare passwords
    // const passwordMatch = await bcrypt.compare(password, user.password);
    // if(!passwordMatch) {
    //   return res.status(401).json({ message: "invalid username or password"});
    // }
    // // generate JWT token
    // const token = jwt.sign(
    //   { userId: user._id, username: user.username },
    //   process.env.SECRET_KEY || "1234!@#%<{*&)",
    //   { expiresIn: "1h" }
    // );
    // return res
    //   .status(200)
    //   .json({ message: "login successful", data: user, token});